//
//  QQLeakDataUploadCenter.m
//
//
//  Created by rosenluo on 16/1/27.
//  Copyright © 2016年 com.tencent. All rights reserved.
//

#import "QQLeakDataUploadCenter.h"
#import "QQLeakDeviceInfo.h"
#import "APMConfigureCenter.h"

#if !__has_feature(objc_arc)
#error  does not support Objective-C Automatic Reference Counting (ARC)
#endif
extern bool ISUPLOAD;
static QQLeakDataUploadCenter *center;
static NSString *const DATA_UPLOAD_URL = @"https://access-sngapm.qcloud.com/json.php";
static NSString *const DATA_UPLOAD_NEW_URL = @"https://sngapm.qq.com/entrance/uploadJson/";
static NSString *const boundary = @"WebKitFormBoundary7MA4YWxkTrZu0gW";
static const NSUInteger TIMEOUT_INTERVAL    = 60;
static NSString *const filename = @"rainbow.log.zip";

@interface NSMutableData (APM)

-(void) addPostValue:(NSString*)data key:(NSString*) key;

@end

@implementation NSMutableData (APM)

-(void) addPostValue:(NSString*)data key:(NSString*) key
{
    [self appendData:[[NSString stringWithFormat:@"--%@\r\n", boundary] dataUsingEncoding:NSUTF8StringEncoding]];
    [self appendData:
    [[NSString stringWithFormat:@"Content-Disposition:form-data;name=\"%@\"\r\n\r\n", key] dataUsingEncoding:NSUTF8StringEncoding]];
    [self appendData:[data dataUsingEncoding:NSUTF8StringEncoding]];
    [self appendData:[[NSString stringWithFormat:@"\r\n"] dataUsingEncoding:NSUTF8StringEncoding]];
}

@end

@implementation QQLeakDataUploadCenter

+(QQLeakDataUploadCenter *)defaultCenter{
    static dispatch_once_t once;
    dispatch_once(&once, ^{
        center = [[QQLeakDataUploadCenter alloc] init];
    });
    return center;
}


-(void)uploadJsonData:(NSDictionary *)info completionHandler:(void (^)(NSURLResponse *response, NSData *data, NSError *error))completionHandler
{
    [self uploadJsonDataToURL:[NSURL URLWithString:DATA_UPLOAD_URL] data:info completionHandler:completionHandler];
#ifdef BUILD_FOR_OTHER_APP
    if(ISUPLOAD){
        [self uploadJsonDataToURL:[NSURL URLWithString:DATA_UPLOAD_NEW_URL] data:info completionHandler:completionHandler];
    }
#endif
}

-(void)uploadJsonDataToURL:(NSURL *)url data:(NSDictionary *)info completionHandler:(void (^)(NSURLResponse *response, NSData *data, NSError *error))completionHandler
{
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    [request setHTTPMethod:@"POST"];
    [request setTimeoutInterval:TIMEOUT_INTERVAL];
    [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];
    [request setHTTPShouldHandleCookies:NO];
    if([NSJSONSerialization isValidJSONObject:info]){
        NSData *data = [NSJSONSerialization dataWithJSONObject:info options:0 error:nil];
        NSString *contentType = [NSString stringWithFormat:@"application/json; charset=utf-8"];
        [request addValue:contentType forHTTPHeaderField:@"Content-Type"];
        request.HTTPBody = data;
        NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:request completionHandler:^(NSData *data,NSURLResponse *response,NSError *error){
            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
            NSString *content =[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
            if(error){
                NSLog(@"upload json failed:%ld, domain:%@",(long)error.code, error.domain);
            }
            else if(httpResponse.statusCode < 200 || httpResponse.statusCode > 300){
                NSLog(@"upload json failed, data is %@,http coded:%ld",content,(long)httpResponse.statusCode);
            }
            else {
                NSLog(@"upload json success,data is %@,httpResponse is:%@",content,httpResponse);
            }
            completionHandler(response,data,error);
        }];
        [task resume];
    }
}

-(void)uploadPerformanceDataToAPM:(NSDictionary *)data p_id:(NSString *)pid plugin:(NSString *)plugin versionname:(NSString *)versionname uin:(NSString *)uin completionHandler:(void (^)(NSURLResponse *response, NSData *data, NSError *error))completionHandler{
    [self uploadPerformanceDataToURL:[NSURL URLWithString:DATA_UPLOAD_URL] data:data p_id:pid plugin:plugin versionname:versionname uin:uin completionHandler:completionHandler];
#ifdef BUILD_FOR_OTHER_APP
    if(ISUPLOAD){
    [self uploadPerformanceDataToNEWAPM:[NSURL URLWithString:DATA_UPLOAD_NEW_URL] data:data p_id:pid plugin:plugin versionname:versionname uin:uin completionHandler:completionHandler];
    }
#endif
}

-(void)uploadPerformanceDataToURL:(NSURL *)url data:(NSDictionary *)data p_id:(NSString *)pid plugin:(NSString *)plugin versionname:(NSString *)versionname uin:(NSString *)uin completionHandler:(void (^)(NSURLResponse *response, NSData *data, NSError *error))completionHandler
{
    if(pid == nil || plugin == nil || uin == nil){
        return ;
    }
    if([NSJSONSerialization isValidJSONObject:data]){
        NSDictionary *clientInfo = @{
                                     @"p_id" : pid,
                                     @"uin" : uin,
                                     @"plugin" : plugin,
                                     @"model" : [QQLeakDeviceInfo platform],
                                     @"versionname" : versionname,
                                     @"os" : [[NSProcessInfo processInfo] operatingSystemVersionString]
                                     };
        NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithDictionary:data];
        [dic setObject:clientInfo forKey:@"clientinfo"];
        [self uploadJsonDataToURL:url data:dic completionHandler:completionHandler];
    }
}

-(void)uploadPerformanceDataToNEWAPM:(NSURL *)url data:(NSDictionary *)data p_id:(NSString *)pid plugin:(NSString *)plugin versionname:(NSString *)versionname uin:(NSString *)uin completionHandler:(void (^)(NSURLResponse *response, NSData *data, NSError *error))completionHandler
{
    if(pid == nil || plugin == nil || uin == nil){
        return ;
    }
    NSTimeInterval currentTime = [NSDate date].timeIntervalSince1970;
    NSString *md5 = [NSString stringWithFormat:@"%@-%@-%@-%@-%lf",uin,[QQLeakDeviceInfo deviceID],pid,plugin,currentTime];
    if([NSJSONSerialization isValidJSONObject:data]){
        NSDictionary *clientInfo = @{
                                     @"p_id" : pid,
                                     @"uin" : uin,
                                     @"plugin" : plugin,
                                     @"device" : [QQLeakDeviceInfo platform],
                                     @"version" : versionname,
                                     @"api_ver" : @1,
                                     @"plugin_ver": @1,
                                     @"client_identify":md5,
                                     @"os" : [[NSProcessInfo processInfo] operatingSystemVersionString],
                                     @"arch":[QQLeakDeviceInfo cpuType]
                                     };
        NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithDictionary:data];
        [dic addEntriesFromDictionary:clientInfo];
        [self uploadJsonDataToURL:url data:dic completionHandler:completionHandler];
    }
}

#pragma -mark NSURLSessionDelegate
-(void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler
{
    if([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]){
        SecTrustResultType result;
        OSStatus status = SecTrustEvaluate(challenge.protectionSpace.serverTrust, &result);
        if(status == errSecSuccess && (result == kSecTrustResultProceed || result == kSecTrustResultUnspecified)){
            NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];
            if(credential){
                completionHandler(NSURLSessionAuthChallengeUseCredential,credential);
            }
            else {
                completionHandler(NSURLSessionAuthChallengePerformDefaultHandling,nil);
            }
        }
        else {
            completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge,nil);
        }
    }
    else {
        completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge,nil);
    }
}

@end

